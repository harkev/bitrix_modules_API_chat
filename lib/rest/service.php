<?php

namespace chat\send\Rest;

// Если мы задаем собственное разрешение можно создать языковую фразу "REST_SCOPE_{Имя вашего разрешения}"
// Тогда в списке разрешений приложения будет использоваться языковая фраза

\Bitrix\Main\Localization\Loc::loadMessages(__FILE__);

class Service
{
// Возвращает описание одного или нескольких разрешений
    public static function getDescription(): array
    {
        $scopes = [];

// Если нужно добавить методы к уже существующему разрешению просто указываем его
// $scopes['crm'] = [];

// Если нужно добавить методы которые не требуют разрешения и доступны всем приложениям
// $scopes[\CRestUtil::GLOBAL_SCOPE] = [];

// Если нужно добавить методы которые будут доступны если выдано собственное разрешение
// Имя разрешения может быть произвольным
        $scopes['chat.send'] = array_merge(
            MessageService::getDescription()
        );
        return $scopes;
    }

// Генерация REST API методов на лету
    public static function findMethodDescription($method, $scope)
    {
// Во второй параметр обработчика приходит значение разрешения
// Оно парсится каким-то странным образом
// В моем случае оно было всегда пусто
// Включаем параноидальный мод и проверим что это нужное разрешение
        if ($scope !== '' && $scope !== 'chat.send') {
            return;
        }

// Соберем все добавленные в предыдущем примере методы в один массив
        $methods = array_merge(
            MessageService::getDescription()
        );

// Если запрошенного метода нет среди наших методов ничего не делаем
        if (!array_key_exists($method, $methods)) {
            return;
        }

// Так как мы не описывали наше разрешение как в прошлом примере
// Укажем что у метода должно быть наше разрешение
        $methods[$method]['scope'] = 'chat.send';
// Вернем описание метода
        return $methods[$method];
    }
}